{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\n\nvar aCallable = require('../internals/a-callable');\n\nvar getIterator = require('../internals/get-iterator');\n\nvar iterate = require('../internals/iterate'); // `Map.groupBy` method\n// https://github.com/tc39/proposal-collection-methods\n\n\n$({\n  target: 'Map',\n  stat: true\n}, {\n  groupBy: function groupBy(iterable, keyDerivative) {\n    aCallable(keyDerivative);\n    var iterator = getIterator(iterable);\n    var newMap = new this();\n    var has = aCallable(newMap.has);\n    var get = aCallable(newMap.get);\n    var set = aCallable(newMap.set);\n    iterate(iterator, function (element) {\n      var derivedKey = keyDerivative(element);\n      if (!has.call(newMap, derivedKey)) set.call(newMap, derivedKey, [element]);else get.call(newMap, derivedKey).push(element);\n    }, {\n      IS_ITERATOR: true\n    });\n    return newMap;\n  }\n});","map":{"version":3,"sources":["C:/Users/Gustavo/Desktop/proj/meme/node_modules/core-js-pure/modules/esnext.map.group-by.js"],"names":["$","require","aCallable","getIterator","iterate","target","stat","groupBy","iterable","keyDerivative","iterator","newMap","has","get","set","element","derivedKey","call","push","IS_ITERATOR"],"mappings":"AAAA;;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,qBAAD,CAAf;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,yBAAD,CAAvB;;AACA,IAAIE,WAAW,GAAGF,OAAO,CAAC,2BAAD,CAAzB;;AACA,IAAIG,OAAO,GAAGH,OAAO,CAAC,sBAAD,CAArB,C,CAEA;AACA;;;AACAD,CAAC,CAAC;AAAEK,EAAAA,MAAM,EAAE,KAAV;AAAiBC,EAAAA,IAAI,EAAE;AAAvB,CAAD,EAAgC;AAC/BC,EAAAA,OAAO,EAAE,SAASA,OAAT,CAAiBC,QAAjB,EAA2BC,aAA3B,EAA0C;AACjDP,IAAAA,SAAS,CAACO,aAAD,CAAT;AACA,QAAIC,QAAQ,GAAGP,WAAW,CAACK,QAAD,CAA1B;AACA,QAAIG,MAAM,GAAG,IAAI,IAAJ,EAAb;AACA,QAAIC,GAAG,GAAGV,SAAS,CAACS,MAAM,CAACC,GAAR,CAAnB;AACA,QAAIC,GAAG,GAAGX,SAAS,CAACS,MAAM,CAACE,GAAR,CAAnB;AACA,QAAIC,GAAG,GAAGZ,SAAS,CAACS,MAAM,CAACG,GAAR,CAAnB;AACAV,IAAAA,OAAO,CAACM,QAAD,EAAW,UAAUK,OAAV,EAAmB;AACnC,UAAIC,UAAU,GAAGP,aAAa,CAACM,OAAD,CAA9B;AACA,UAAI,CAACH,GAAG,CAACK,IAAJ,CAASN,MAAT,EAAiBK,UAAjB,CAAL,EAAmCF,GAAG,CAACG,IAAJ,CAASN,MAAT,EAAiBK,UAAjB,EAA6B,CAACD,OAAD,CAA7B,EAAnC,KACKF,GAAG,CAACI,IAAJ,CAASN,MAAT,EAAiBK,UAAjB,EAA6BE,IAA7B,CAAkCH,OAAlC;AACN,KAJM,EAIJ;AAAEI,MAAAA,WAAW,EAAE;AAAf,KAJI,CAAP;AAKA,WAAOR,MAAP;AACD;AAd8B,CAAhC,CAAD","sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar aCallable = require('../internals/a-callable');\nvar getIterator = require('../internals/get-iterator');\nvar iterate = require('../internals/iterate');\n\n// `Map.groupBy` method\n// https://github.com/tc39/proposal-collection-methods\n$({ target: 'Map', stat: true }, {\n  groupBy: function groupBy(iterable, keyDerivative) {\n    aCallable(keyDerivative);\n    var iterator = getIterator(iterable);\n    var newMap = new this();\n    var has = aCallable(newMap.has);\n    var get = aCallable(newMap.get);\n    var set = aCallable(newMap.set);\n    iterate(iterator, function (element) {\n      var derivedKey = keyDerivative(element);\n      if (!has.call(newMap, derivedKey)) set.call(newMap, derivedKey, [element]);\n      else get.call(newMap, derivedKey).push(element);\n    }, { IS_ITERATOR: true });\n    return newMap;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}