{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Gustavo/Desktop/proj/Diskify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/Gustavo/Desktop/proj/Diskify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:/Users/Gustavo/Desktop/proj/Diskify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/Gustavo/Desktop/proj/Diskify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"C:/Users/Gustavo/Desktop/proj/Diskify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:/Users/Gustavo/Desktop/proj/Diskify/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\Gustavo\\\\Desktop\\\\proj\\\\Diskify\\\\src\\\\components\\\\Diskify.js\";\nimport React, { Component } from 'react';\nimport './Diskify.css';\nimport Web3 from 'web3';\nimport Abi_Diskify from '../abis/Diskify.json';\n\nvar _require = require('ipfs-http-client'),\n    create = _require.create;\n\nvar ipfs = create({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n});\n\nvar Diskify = /*#__PURE__*/function (_Component) {\n  _inherits(Diskify, _Component);\n\n  var _super = _createSuper(Diskify);\n\n  function Diskify(props) {\n    var _this2;\n\n    _classCallCheck(this, Diskify);\n\n    _this2 = _super.call(this, props);\n    _this2.state = {};\n    _this2.contract = '';\n    _this2.eth_account = '';\n    return _this2;\n  }\n\n  _createClass(Diskify, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.teste();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }, {\n    key: \"teste\",\n    value: function () {\n      var _teste = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var web3, accounts, abi, _this, a;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                web3 = window.web3;\n                _context2.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context2.sent;\n                this.eth_account = accounts[0];\n                console.log(accounts);\n                abi = Abi_Diskify.abi;\n                this.contract = new web3.eth.Contract(abi, \"0xe0b0Ef4879202286503734484184BEEF3675DCfe\"); // fetch contract\n\n                console.log(this.contract);\n                _this = this;\n                a = _this.contract.methods.album_id_counter().call({\n                  gasPrice: 20000000,\n                  gas: 2000\n                });\n                console.log(a);\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function teste() {\n        return _teste.apply(this, arguments);\n      }\n\n      return teste;\n    }()\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context3.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  console.log(\"User did not connect its metamask wallet.\");\n                }\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 4\n        }\n      });\n    }\n  }]);\n\n  return Diskify;\n}(Component);\n\nexport default Diskify;","map":{"version":3,"sources":["C:/Users/Gustavo/Desktop/proj/Diskify/src/components/Diskify.js"],"names":["React","Component","Web3","Abi_Diskify","require","create","ipfs","host","port","protocol","Diskify","props","state","contract","eth_account","loadWeb3","teste","web3","window","eth","getAccounts","accounts","console","log","abi","Contract","_this","a","methods","album_id_counter","call","gasPrice","gas","ethereum","enable","currentProvider"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,eAAP;AAEA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,WAAP,MAAwB,sBAAxB;;AAEA,eAAiBC,OAAO,CAAC,kBAAD,CAAxB;AAAA,IAAOC,MAAP,YAAOA,MAAP;;AAEA,IAAMC,IAAI,GAAGD,MAAM,CAAC;AAACE,EAAAA,IAAI,EAAE,gBAAP;AAAyBC,EAAAA,IAAI,EAAC,IAA9B;AAAoCC,EAAAA,QAAQ,EAAC;AAA7C,CAAD,CAAnB;;IAGMC,O;;;;;AAuCL,mBAAaC,KAAb,EAAoB;AAAA;;AAAA;;AAEnB,+BAAMA,KAAN;AAEA,WAAKC,KAAL,GAAa,EAAb;AAEA,WAAKC,QAAL,GAAgB,EAAhB;AAEA,WAAKC,WAAL,GAAmB,EAAnB;AARmB;AAWnB;;;;;yFAhDD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAES,KAAKC,QAAL,EAFT;;AAAA;AAAA;AAAA,uBAMS,KAAKC,KAAL,EANT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;4EAUC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAEOC,gBAAAA,IAFP,GAEcC,MAAM,CAACD,IAFrB;AAAA;AAAA,uBAIyBA,IAAI,CAACE,GAAL,CAASC,WAAT,EAJzB;;AAAA;AAIQC,gBAAAA,QAJR;AAME,qBAAKP,WAAL,GAAmBO,QAAQ,CAAC,CAAD,CAA3B;AAEAC,gBAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AAEMG,gBAAAA,GAVR,GAUcrB,WAAW,CAACqB,GAV1B;AAYE,qBAAKX,QAAL,GAAgB,IAAII,IAAI,CAACE,GAAL,CAASM,QAAb,CAAsBD,GAAtB,EAA2B,4CAA3B,CAAhB,CAZF,CAY4F;;AAE1FF,gBAAAA,OAAO,CAACC,GAAR,CAAY,KAAKV,QAAjB;AAGMa,gBAAAA,KAjBR,GAiBgB,IAjBhB;AAmBQC,gBAAAA,CAnBR,GAmBWD,KAAK,CAACb,QAAN,CAAee,OAAf,CAAuBC,gBAAvB,GAA0CC,IAA1C,CAA+C;AAACC,kBAAAA,QAAQ,EAAE,QAAX;AAAqBC,kBAAAA,GAAG,EAAE;AAA1B,iBAA/C,CAnBX;AAqBEV,gBAAAA,OAAO,CAACC,GAAR,CAAYI,CAAZ;;AArBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;8EAyCA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEKT,MAAM,CAACe,QAFZ;AAAA;AAAA;AAAA;;AAIGf,gBAAAA,MAAM,CAACD,IAAP,GAAc,IAAIf,IAAJ,CAASgB,MAAM,CAACe,QAAhB,CAAd;AAJH;AAAA,uBAKSf,MAAM,CAACe,QAAP,CAAgBC,MAAhB,EALT;;AAAA;AAOG,oBAAIhB,MAAM,CAACD,IAAX,EAAiB;AAEjBC,kBAAAA,MAAM,CAACD,IAAP,GAAc,IAAIf,IAAJ,CAASgB,MAAM,CAACD,IAAP,CAAYkB,eAArB,CAAd;AAED,iBAJC,MAIK;AAENb,kBAAAA,OAAO,CAACC,GAAR,CAAY,2CAAZ;AAEA;;AAfF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WAoBD,kBAAQ;AAEP,0BAEC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFD;AAQA;;;;EAnFoBtB,S;;AAwFtB,eAAeS,OAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport './Diskify.css';\r\n\r\nimport Web3 from 'web3';\r\nimport Abi_Diskify from '../abis/Diskify.json';\r\n\r\nconst {create} = require('ipfs-http-client');\r\n\r\nconst ipfs = create({host: 'ipfs.infura.io', port:5001, protocol:'https'});\r\n\r\n\r\nclass Diskify extends Component {\r\n\r\n\tasync componentWillMount() {\r\n\r\n    await this.loadWeb3();\r\n\r\n    //await this.loadBlockchainData();\r\n\r\n    await this.teste();\r\n\r\n  }\r\n\r\n  async teste(){\r\n\r\n  \tconst web3 = window.web3;\r\n\r\n    const accounts = await web3.eth.getAccounts();\r\n\r\n    this.eth_account = accounts[0];\r\n\r\n    console.log(accounts);\r\n\r\n    const abi = Abi_Diskify.abi;\r\n      \r\n    this.contract = new web3.eth.Contract(abi, \"0xe0b0Ef4879202286503734484184BEEF3675DCfe\"); // fetch contract\r\n    \r\n    console.log(this.contract);\r\n\r\n\r\n    const _this = this;\r\n\r\n    const a =_this.contract.methods.album_id_counter().call({gasPrice: 20000000, gas: 2000});\r\n\r\n    console.log(a);\r\n\r\n\r\n  }\r\n\r\n\r\n\tconstructor (props) {\r\n\r\n\t\tsuper(props);\r\n\r\n\t\tthis.state = {};\r\n\r\n\t\tthis.contract = '';\r\n\r\n\t\tthis.eth_account = '';\r\n\r\n\r\n\t}\r\n\r\n\r\n  async loadWeb3() {\r\n\r\n\t  if (window.ethereum) {\r\n\r\n\t    window.web3 = new Web3(window.ethereum);\r\n\t    await window.ethereum.enable();\r\n\r\n\t  } if (window.web3) {\r\n\r\n\t    window.web3 = new Web3(window.web3.currentProvider);\r\n\r\n\t  } else {\r\n\r\n\t  \tconsole.log(\"User did not connect its metamask wallet.\");\r\n\r\n\t  }\r\n\r\n\t}\r\n\r\n\r\n\trender(){\r\n\r\n\t\treturn (\r\n\r\n\t\t\t<div>\r\n\r\n\t\t\t</div>\r\n\r\n\t\t);\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport default Diskify;\r\n"]},"metadata":{},"sourceType":"module"}